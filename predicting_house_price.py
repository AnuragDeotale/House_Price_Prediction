# -*- coding: utf-8 -*-
"""Predicting_House_Price.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qSS91dN8KIa5r5vvcaAOOXEJZPEDNoOL

**Import all the required libraries**
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""**Load the dataset California Housing**"""

from sklearn.datasets import fetch_california_housing
housing=fetch_california_housing()

type(housing)

print(housing)

print(housing.DESCR)

print(housing.feature_names)

print(housing.target)

"""**Prepare the Data**"""

dataset=pd.DataFrame(housing.data,columns=housing.feature_names)

type(dataset)

dataset.head()

dataset.tail()

dataset['Price']=housing.target

dataset.head()

dataset.info()

"""**Statistical Description of the data**"""

dataset.describe()

dataset.isnull()

dataset.isnull().sum()

"""**EDA -> Exploratory Data Analysis**"""

dataset.corr()

"""* AveBedrooms and AveRooms -> 0.847621
* Longitude and Latitude -> -0.924664
"""

sns.pairplot(dataset)

"""BoxPlot : To detech the outliers in a given dataset"""

fig,ax=plt.subplots(figsize=(15,15))
sns.boxplot(data=dataset,ax=ax)
plt.savefig("boxPlot.jpg")

## Split the data into independent and dependent features
X=dataset.iloc[:,:-1] ## iloc represents index wise , [All the rows: All the columns except the last one]
Y=dataset.iloc[:,-1] # [ All the rows except the last : Only take last column ]

X

Y

## Split the data into train and test
from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3,random_state=42)

X_train

X_test

Y_train

Y_test

## Normalization of the given data points
from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
X_train_norm=scaler.fit_transform(X_train)

X_train_norm

fig,ax=plt.subplots(figsize=(15,15))
sns.boxplot(data=X_train_norm,ax=ax)
plt.savefig("boxPlotTrainData.jpg")

X_test_norm=scaler.transform(X_test)

fig,ax=plt.subplots(figsize=(15,15))
sns.boxplot(data=X_test_norm,ax=ax)
plt.savefig("boxPlotTestData.jpg")

"""**Model Training**"""

from sklearn.linear_model import LinearRegression
regression=LinearRegression()
regression.fit(X_train_norm,Y_train)

print(regression.coef_)

print(regression.intercept_)

"""**Model Prediction**"""

reg_pred=regression.predict(X_test_norm)
reg_pred

# Calculate the error or the residual
residuals=Y_test-reg_pred
residuals

## Distribution Plot of the residuals
sns.displot(residuals,kind="kde")

"""**Model Performance**"""

## Lower error value - MSE and MAE
## Higher value- r2 score and adjusted r2 score

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
print(mean_squared_error(Y_test,reg_pred))
print(mean_absolute_error(Y_test,reg_pred))
print(r2_score(Y_test,reg_pred))
print(np.sqrt(mean_squared_error(Y_test,reg_pred)))

score=r2_score(Y_test,reg_pred)
score

"""Adjusted R-square"""

1-(1-score)*(len(Y_test)-1)/len((Y_test)-X_test_norm.shape[1]-1)

X_test_norm.shape

X_test_norm.shape[1]

"""**Save the Model -> Pickle File**

Pickle in Python is primarily used in serializing and deserializing a Python object structure. In other words, it's the process of converting a Python object into a byte stream to store it in a file/database, maintain program state across sessions, or transport data over the network.
"""

import pickle
pickle.dump(regression,open('regmodel.pkl','wb'))

"""Load the file and use it for future test data predictions"""

model=pickle.load(open('regmodel.pkl','rb'))

model.predict(scaler.transform(housing.data[0].reshape(1,-1)))

model.predict(X_test_norm)